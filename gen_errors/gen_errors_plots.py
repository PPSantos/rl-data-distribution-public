import pathlib
import os
import json

import numpy as np 

import matplotlib.pyplot as plt
import seaborn as sns
plt.style.use('ggplot')

FIGURE_X = 6.0
FIGURE_Y = 4.0

DATA_FOLDER_PATH = str(pathlib.Path(__file__).parent.parent.absolute()) + '/data/'
PLOTS_FOLDER_PATH = str(pathlib.Path(__file__).parent.absolute()) + '/analysis/plots/'

exp_id = 'gen_errors_2021-05-02-19-57-45'

def get_args_json_file(path):
    with open(path + "/args.json", 'r') as f:
        args = json.load(f)
    f.close()
    return args

if __name__ == "__main__":

    # errors = {'0.05': [0.163504145369892, 0.24384672221055004, 1.0986923853731003, 1.0566839854097214, 0.050141565002102206, 0.003788572338119245, 0.1534068443654486, 0.0056907119483797786, 0.020643096950546003, 0.029417615917220807, 0.018774265644745824, 0.23651821335611367, 0.01095045149545193, 0.0002728561983300626, 0.016932831250209945, 0.07287240685214891, 0.05719567002048387, 0.00031685172329054545, 0.11229730309238328, 0.00026594935665236186, 0.04716377963861618, 0.02533798923334274, 0.035409634210260776, 0.17595654239496383, 0.06519339758761, 0.25092982259873264, 0.20431132619480352, 0.14565603128970794, 0.01921352995789727, 0.07454128446414154, 0.01566947792439899, 1.385058759435565, 0.09005380962758502, 0.18497922418616364, 0.06996887679300068, 0.03229242399869059, 0.18576709315848072, 0.022107401347872813,
    # 0.38778416202139576, 0.933161893344638, 0.04592017518240821, 0.022885360526325504, 0.17916198161074437, 0.37507239799428205, 0.5767834999091603, 1.017315293309614, 0.10792023864843903, 0.020840137858163854, 0.08125971826455536, 0.025820762257802943], '0.1': [0.008759550486898693, 0.02735854330518639, 0.0016673130143645132, 0.023097224796914784, 0.0533314270127776, 0.014254194286361432, 0.0016197147102205989, 0.004966396305069232, 0.0007366578134648805, 0.08499659515634095, 0.024935727717680933, 0.020466560719208715, 0.004113541089077133, 0.01828813016195774, 0.002171521785063746, 0.02119148434390916, 0.013586156952477557, 0.017251484978295428, 0.031905644524193866, 0.22157771097114543, 0.20526605357965622, 0.14187902698675003, 0.2259562562926689, 0.28263134250799027, 0.3402250360473076, 0.05810806406892022, 0.34284231318391045, 0.052469175973545834, 0.04569527758515557, 0.007298749604832455, 0.015602114246275445, 0.6123372304286071, 0.00968241934576275, 0.15366899724206684, 0.04669166786657253, 0.44576469943594654, 0.008514227116726891, 0.01487463549313639, 0.007685841763638512, 0.11079148337912281, 0.020280533667756617, 0.002229294968364437, 0.01441923599171857, 0.12409762363362531, 0.6297833539969899, 0.0018713361845215104, 0.14707307629499455, 0.015555054288137415, 0.00757242373369138, 0.046458452601205846], '0.25': [0.011105723942422596, 0.06483374890825355, 0.011612363423013417, 0.006019882594442638, 0.024345107639932362, 0.006616697537750849, 0.030270439174667096, 0.007528442356094622, 0.008355754825577044, 0.02369631744638001, 0.01976989313222899, 0.013597006199555395, 0.9874814845307266, 0.03858388856790529, 0.012132034741420883, 0.0025554961084355288, 0.021077507126427752, 0.013935334098242658, 0.0008352929235468931, 0.003966576468848126, 0.26590877284845504, 0.16003900279840622, 0.10843425502618942, 0.011348063848821255, 0.05303579082330856, 0.01663319460452728, 0.013601821580540463, 0.02444477685390778, 0.004058879533421322, 0.017547992335193552, 0.005563261554625054, 0.017603752567384223, 0.0025356983681654732, 0.02448201422491314, 0.022117736385252496, 0.29336909339499195, 0.010070977961398109, 0.008404661341689712, 0.04935473040280436, 0.02320556075608038, 0.024148068619487484, 0.04556123237538556, 0.04423622112202863, 0.03764871578145246, 0.030977926445720394, 0.02825040749452512, 0.03743675385021017, 0.08429752859017792, 0.026733010668527624, 0.01646879281498148], '0.5': [0.006557516490316662, 0.03681569520125416, 0.005333133305215565, 0.09965104636063549, 0.016911454762124745, 0.007247549083724714, 0.028576236751571393, 0.015469688388809466, 0.005775791194930768, 0.041979923021941534, 0.015422000445346695, 0.009689932467741968, 0.005227102793674332, 0.003831391932768824, 0.0019452518202829339, 0.025278455626868146, 0.014282829177283185, 0.003917939078711408, 0.007336384665869611, 0.00042163668880568217, 0.022315447427423862, 0.02617878208318558, 0.09071164836725387, 0.03440528621515426, 0.2593434404357353, 0.0428736626297348, 0.00965837828220062, 0.012056666693080142, 0.035350533856517874, 0.004453140577662662, 0.022164461567018012, 0.08147108311853168, 0.7482846963252135, 0.04580241198739765, 0.02058344773554488, 0.020652590548373206, 0.13771025226187428, 0.005755482470370277, 0.0035821779125699837, 0.07435089186368082, 0.03301938552927752, 0.11691895942616681, 0.03504876117634992, 0.008680143164875309, 0.06270448552328955, 0.014646679501760462, 0.0323904451320286, 0.05062815513111307, 0.006744712252389928, 0.023004442792165736], '1.0': [0.04251796778550121, 0.02603202286849049, 0.009297974907260587, 0.006443790828085216, 0.018308826054239002, 0.0032862243919522527, 0.037712234470352435, 0.1037717876701505, 0.022675174686416888, 0.017941850635513568, 0.02764522492666721, 0.01653218806008816, 0.003890877368254664, 0.04289137780447483, 0.01050208612539305, 0.019272320854760272, 0.011886126860885415, 0.009337551009558576, 0.003297097098730939, 0.000777727973364728, 0.045154149435369106, 0.029211099050847622, 0.2120087694152275, 0.06079620609441605, 0.0232418130858818, 0.008749288240086361,
    # 0.002359431901585385, 0.0039608062118179355, 0.010499519029270932, 0.0252718509048111, 0.002530155136201362, 0.013512971446898003, 0.0010848014762370184, 0.08141040559015034, 0.0202951455573106, 0.024952846455223332, 0.013523282254361169, 0.026392517840243324, 0.014538346087313636, 0.008243976389742835, 0.013009271813152035, 0.010823883818867008, 0.03199151973653058, 0.14648099918436785, 0.0687204219825246, 0.0325889888813381, 0.013190459526995824, 0.006927401166189173, 0.012819480217913792, 0.03230562840007589], '2.5': [0.031287022198343006, 0.011838964854574474, 0.03114085618147877, 0.00428719099869701, 0.006711534892416271, 0.00786791422654698, 0.0014072475700528386, 0.0034335670738370183, 0.0030225334434659246, 0.043293412491405725, 9.334624032497629e-05, 0.0003361755631399177, 0.0017852836869192146,
    # 0.004124278423981664, 0.005625838635163305, 0.0036579436182011538, 0.009688264739416974, 0.0007671183465947085, 0.016336686026953595, 0.0028700762868891783, 0.007488543890325161, 0.04306406269231644, 0.010505383111627964, 0.2299514364226738, 0.05286616573491898, 0.011549431166041568, 0.004448574700962826, 0.0020818293899185214, 0.02757730828367988, 0.019692329035633005, 0.005020144031431695, 0.035518822624299506, 0.046699407146360894, 0.00019144768914935995, 0.03177666421136616, 0.017555175577975257, 0.0056291238910188834, 0.013358889376498206, 0.013005195414401038, 0.004038272654391273, 0.039696254538776676, 0.0362745903008006, 0.020527758406879704, 0.01885863323282977, 0.0109135725028493, 0.0015908178279514518, 0.021815926175344447, 0.028621822256814977, 0.018252223391305944, 0.006637543101083776], '5.0': [0.007739118968344005, 0.015054650868081776, 0.004840322102212635, 0.01660685959944752, 0.05166815916408951, 0.004026073429092669, 0.010740655872329974, 0.03842578509141514, 0.0010531959800870183, 0.01438989064405849, 0.012135023472504614, 0.0020893758513498284, 0.02930665552834988, 0.00942314207772732, 0.02425910428903566, 0.007589333641625506, 0.02478348551998244, 0.015581018340491193, 0.01582180796871291, 0.027292734992407697, 0.11028962840875778, 0.010895306967107388, 0.010626261331232456, 0.28008800258478317, 0.013355548284856411, 0.015146058717381283, 0.05149702421725921, 0.02231566301883392, 0.008715656863086618, 0.010858627690441214, 0.04240751509466412, 0.03912687058648823, 0.0031535601159071724, 0.008316812469575385, 0.03649723772802593, 0.016648588930941566, 0.0032798631542692025, 0.007977185999728187, 0.007381619656704919, 0.0006834880954256217, 0.017711319731952946, 0.024839796828510563, 0.019002876473186214, 0.024565257834675114, 0.10878614406514386, 0.06339308585621073, 0.019927709955942174, 0.03087428246043966, 0.03594896163440897, 0.014090568166006068], '10.0': [0.009596638118124279, 0.026264480983114513, 0.002524189387655529, 0.010106988514566151, 0.0030009227644440806, 0.0074411811561434504, 0.01254640200425694, 0.01808987238694737, 0.04298816703543151, 0.1794301130650946, 0.013921613095002172, 0.025085554562587875, 0.03417837083120823, 0.017160171864228246, 0.0025629943587350823, 0.0015411442636479311, 0.009201877701378924, 0.0073131388544072085, 0.003174417603112323, 0.0011820727468501158, 0.013960306741388706, 0.0005649972931465186, 0.07677740345159378, 0.002005154989568325, 0.09453397502741012, 0.00010057099758453703, 0.01162131436764069, 0.009015756925929264, 0.00465877660213776, 0.022113877615321353, 0.010319235370543023, 0.022692379905793647, 0.04920250483250932, 0.018452761127564887, 0.0037585521201157768, 0.002308426653719886, 0.013010321413851722, 0.01115602091488932, 0.018827853953219398, 0.0362381322735319, 0.009133615302326481, 0.03868011455464582, 0.006718196677448551,
    # 0.02825339813303729, 0.0016448877327464029, 1.5348534810999404e-05, 0.022495954890024206, 0.054171949963796595, 0.00914280482389529, 0.037125795740854284]}

    # residual_ranks = {'0.05': [34, 20, 1, 1, 58, 78, 21, 78, 49, 50, 51, 40, 93, 97, 81, 27, 29, 97, 55, 98, 42, 43, 84, 10, 44, 24, 17, 40, 84, 64, 79, 1, 57, 63, 71, 45, 25, 91, 9, 1, 49, 79, 29, 1, 8, 1, 40, 71, 37, 63], '0.1': [93, 73, 94, 64, 68, 50, 90, 63, 94, 18, 49, 38, 91, 71, 90, 33, 46, 52, 47, 15, 5, 16, 6, 26, 2, 26, 12, 27, 70, 81, 52, 1, 56, 38, 82, 1, 57, 61, 84, 35, 66, 96, 41, 6, 3, 99, 13, 75, 80, 49], '0.25': [72, 60, 64, 77, 73, 92, 65, 31, 64, 65, 20, 44, 1, 51, 34, 89, 44, 33, 99, 79, 4, 9, 11, 35, 40, 45, 66, 63, 91, 70, 92, 34, 93, 60, 53, 1, 76, 70, 10, 49, 71, 12, 23, 73, 40, 31, 37, 18, 74, 73], '0.5': [71, 72, 95, 45, 36, 30, 2, 73, 64, 67, 36, 39, 67, 64, 84, 46, 33, 89, 50, 97, 23, 31, 35, 50, 3, 23, 43, 55, 29, 80, 64, 18, 1, 2, 43, 37, 1, 88, 90, 10, 36, 1, 29, 58, 36, 48, 41, 25, 74, 34], '1.0': [48, 68, 95, 74, 27, 82, 37, 5, 33, 3, 23, 86, 62, 32, 20, 50, 73, 55, 86, 98, 21, 3, 7, 29, 9, 72, 97, 78, 44, 58, 84, 61, 91, 17, 17, 43, 67, 47, 55, 72, 65, 74, 62, 18, 8, 27, 71, 85, 68, 28], '2.5': [42, 86, 50, 96, 62, 16, 83, 94, 33, 79, 98, 95, 56, 49, 64, 87, 45, 96, 36, 77, 85, 66, 88, 3, 10, 55, 74, 95, 40, 59, 71, 9, 24, 100, 11, 56, 92, 52, 52, 91, 7, 26, 61, 27, 61, 96, 31, 35, 68, 81],
    # '5.0': [86, 63, 94, 81, 57, 78, 39, 49, 91, 9, 40, 42, 16, 40, 34, 49, 54, 45, 58, 41, 10, 78, 77, 2, 54, 50, 22, 30, 73, 51, 17, 14, 97, 53, 29, 60, 91, 83, 61, 96, 31, 51, 59, 46, 3, 21, 67, 32, 31, 44], '10.0': [55, 71, 96, 52, 88, 37, 50, 50, 38, 12, 27, 11, 71, 10, 65, 95, 76, 64, 81, 84, 65, 94, 40, 85, 16, 100, 77, 24, 70, 45, 45, 46, 65, 18, 92, 94, 60, 47, 31, 42, 50, 11, 79, 16, 87, 100, 40, 22, 57, 29]}

    # alphas = list(errors.keys())
    # alphas = [float(a) for a in alphas]
    # print(alphas)

    # errors = [np.mean(vals) for vals in errors.values()]
    # print(errors)

    # ranks = [np.mean(vals) for vals in residual_ranks.values()]
    # print(ranks)

    # fig = plt.figure()
    # fig.set_size_inches(FIGURE_X, FIGURE_Y)
    # plt.scatter(alphas, errors)
    # plt.title('Average generalization error at max(Yhat)')
    # plt.legend()
    # plt.show()

    # fig = plt.figure()
    # fig.set_size_inches(FIGURE_X, FIGURE_Y)
    # plt.scatter(alphas, ranks)
    # plt.xlabel('Alpha')
    # plt.ylabel('Rank')
    # plt.title('Average residual rank at max(Yhat)')
    # plt.legend()
    # plt.show()


    # Prepare plots output folder.
    output_folder = PLOTS_FOLDER_PATH + exp_id + '/'
    os.makedirs(output_folder, exist_ok=True)

    # Get args file (assumes all experiments share the same arguments).
    args = get_args_json_file(DATA_FOLDER_PATH + exp_id)
    print('Args:')
    print(args)

    # Store a copy of the args.json file inside plots folder.
    with open(output_folder + "args.json", 'w') as f:
        json.dump(args, f)
        f.close()

    # Open data.
    print(f"Opening experiment {exp_id}")
    exp_path = DATA_FOLDER_PATH + exp_id
    with open(exp_path + "/data.json", 'r') as f:
        data = json.load(f)
        data = json.loads(data)
    f.close()

    print(data.keys())

    # Plot function to fit (G.P. prior samples).
    fig = plt.figure()
    fig.set_size_inches(FIGURE_X, FIGURE_Y)
    for s in range(args['number_of_functions']):
        plt.scatter(data['X'], data['Ys'][s], label=f'Sample {s}')
    plt.title('Functions to fit (G.P. prior samples)')
    plt.legend()
    # plt.show()
    # plt.savefig('{0}/functions_to_fit.pdf'.format(output_folder), bbox_inches='tight', pad_inches=0)
    plt.savefig('{0}/functions_to_fit.png'.format(output_folder), bbox_inches='tight', pad_inches=0)
    plt.close()

    # average_errors
    average_errors = [np.mean(vals) for vals in data['average_errors'].values()]
    fig = plt.figure()
    fig.set_size_inches(FIGURE_X, FIGURE_Y)
    plt.scatter(args['dirichlet_alphas'], average_errors)
    plt.plot(args['dirichlet_alphas'], average_errors)
    plt.xlabel('Alpha (Dirichelet parameter)')
    plt.ylabel('Average total abs. residual error')
    # plt.legend()
    # plt.show()
    plt.savefig('{0}/average_total_abs_residual_error.png'.format(output_folder), bbox_inches='tight', pad_inches=0)

    # errors_at_max
    average_errors_at_max = [np.mean(vals) for vals in data['errors_at_max'].values()]
    fig = plt.figure()
    fig.set_size_inches(FIGURE_X, FIGURE_Y)
    plt.scatter(args['dirichlet_alphas'], average_errors_at_max)
    plt.plot(args['dirichlet_alphas'], average_errors_at_max)
    plt.xlabel('Alpha (Dirichelet parameter)')
    plt.ylabel('Average abs. residual error \n at x = argmax(Yhat)')
    # plt.legend()
    # plt.show()
    plt.savefig('{0}/average_abs_residual_error_at_max.png'.format(output_folder), bbox_inches='tight', pad_inches=0)

    # error_ranks_at_max
    average_error_rank_at_max = [np.mean(vals) for vals in data['error_ranks_at_max'].values()]
    #average_error_rank_at_max = np.array(average_error_rank_at_max) / args['nb_of_samples']
    fig = plt.figure()
    fig.set_size_inches(FIGURE_X, FIGURE_Y)
    plt.scatter(args['dirichlet_alphas'], average_error_rank_at_max)
    plt.plot(args['dirichlet_alphas'], average_error_rank_at_max)
    plt.xlabel('Alpha (Dirichelet parameter)')
    plt.ylabel(f'Average rank (out of {args["nb_of_samples"]}) of abs. residual error \n at x = argmax(Yhat)')
    # plt.legend()
    # plt.show()
    plt.savefig('{0}/average_rank_abs_residual_error_at_max.png'.format(output_folder), bbox_inches='tight', pad_inches=0)

    # max_estimation_mistakes
    average_max_estimation_mistakes = [np.mean(vals) for vals in data['max_estimation_mistakes'].values()]
    fig = plt.figure()
    fig.set_size_inches(FIGURE_X, FIGURE_Y)
    plt.scatter(args['dirichlet_alphas'], average_max_estimation_mistakes)
    plt.plot(args['dirichlet_alphas'], average_max_estimation_mistakes)
    plt.xlabel('Alpha (Dirichelet parameter)')
    plt.ylabel('Average argmax estimation mistakes')
    # plt.legend()
    # plt.show()
    plt.savefig('{0}/average_argmax_estimation_mistakes.png'.format(output_folder), bbox_inches='tight', pad_inches=0)
   
    # max_estimation_mistakes_2
    average_max_estimation_mistakes_2 = [np.mean(vals) for vals in data['max_estimation_mistakes_2'].values()]
    fig = plt.figure()
    fig.set_size_inches(FIGURE_X, FIGURE_Y)
    plt.scatter(args['dirichlet_alphas'], average_max_estimation_mistakes_2)
    plt.plot(args['dirichlet_alphas'], average_max_estimation_mistakes_2)
    plt.xlabel('Alpha (Dirichelet parameter)')
    plt.ylabel('Average argmax estimation mistakes \n (within eps. dist.)')
    # plt.legend()
    # plt.show()
    plt.savefig('{0}/average_argmax_estimation_mistakes_2.png'.format(output_folder), bbox_inches='tight', pad_inches=0)
   